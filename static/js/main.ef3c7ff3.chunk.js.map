{"version":3,"sources":["components/AddName.js","components/NamesList.js","App.js","serviceWorker.js","index.js"],"names":["AddName","handleAddName","e","preventDefault","name","target","elements","value","trim","props","onSubmit","this","type","placeholder","id","autoFocus","className","React","Component","NamesList","handleRemoveName","nameToRemove","names","map","index","key","onClick","App","state","length","setState","alert","handleRandomize","array","i","j","Math","floor","random","temp","indexOf","splice","handdleDeleteAll","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAwBeA,G,kNApBbC,cAAgB,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OAAOC,SAASF,KAAKG,MAAMC,OAE1C,OADAN,EAAEG,OAAOC,SAASF,KAAKG,MAAQ,GACxB,EAAKE,MAAMR,cAAcG,I,uDAKlC,OACE,6BACE,0BAAMM,SAAYC,KAAKV,eACtB,2BAAOW,KAAK,OAAOR,KAAK,OAAOS,YAAY,uBAAuBC,GAAG,aAAaC,WAAS,IAAS,4BAAQC,UAAU,iBAAlB,kB,GAbrFC,IAAMC,YCqBbC,E,4MApBbC,iBAAmB,SAAClB,GAClBA,EAAEC,iBACF,IAAIkB,EAAenB,EAAEG,OAAOD,KAC5B,OAAO,EAAKK,MAAMW,iBAAiBC,I,uDAG3B,IAAD,OACP,OAEE,4BAAKV,KAAKF,MAAMa,MAAMC,KAAI,SAACnB,EAAMoB,GAAP,OAC1B,yBAAKC,IAAKD,EAAOR,UAAU,6BACzB,wBAAIS,IAAKD,GAAQpB,GACjB,4BAAQA,KAAMA,EAAMsB,QAAS,EAAKN,iBAAkBJ,UAAU,kBAA9D,c,GAdgBC,IAAMC,WCkEfS,E,4MA9DbC,MAAQ,CACNN,MAAO,I,EAITrB,cAAgB,SAACG,GACfA,EAAKyB,QAAU,EAAI,EAAKC,SAAS,CAC/BR,MAAM,GAAD,mBAAM,EAAKM,MAAMN,OAAjB,CAAwBlB,MAC1B2B,MAAM,wB,EAIbC,gBAAkB,WAGhB,IAFA,IAAMC,EAAQ,EAAKL,MAAMN,MAEhBY,EAAID,EAAMJ,OAAS,EAAGK,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCK,EAAON,EAAMC,GACjBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKI,EAEb,EAAKT,SAAS,CACZR,MAAOW,K,EAKXb,iBAAmB,SAAChB,GAClB,IAAM6B,EAAK,YAAO,EAAKL,MAAMN,OACvBE,EAAQS,EAAMO,QAAQpC,IACb,IAAXoB,IACFS,EAAMQ,OAAOjB,EAAO,GACpB,EAAKM,SAAS,CACZR,MAAOW,M,EAObS,iBAAmB,WACjB,EAAKZ,SAAS,CACZR,MAAO,M,uDAKT,OACE,yBAAKN,UAAU,OACf,yBAAKF,GAAG,WACN,6CACA,kBAAC,EAAD,CAAWQ,MAAOX,KAAKiB,MAAMN,MAAOF,iBAAkBT,KAAKS,mBAC3D,kBAAC,EAAD,CAASnB,cAAeU,KAAKV,gBAC7B,4BAAQyB,QAASf,KAAKqB,gBAAiBhB,UAAU,iBAAjD,WACA,4BAAQU,QAASf,KAAK+B,iBAAkB1B,UAAU,iBAAlD,oB,GAvDUC,IAAMC,WCOJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ef3c7ff3.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\n//The handleAddName method in this component simply returns the OTHER handleAddName method passed down from the props, with the 'name' argument able to be added\r\nclass AddName extends React.Component {\r\n  handleAddName = (e) => {\r\n    e.preventDefault();\r\n    const name = e.target.elements.name.value.trim();\r\n    e.target.elements.name.value = ''\r\n    return this.props.handleAddName(name)\r\n\r\n  }\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <form onSubmit = {this.handleAddName}>\r\n       <input type=\"text\" name=\"name\" placeholder=\"Enter name to add...\" id=\"name-input\" autoFocus></input><button className=\"bottom-button\">Add Name</button>\r\n      </form>\r\n    </div>\r\n  )\r\n} \r\n}\r\n\r\n\r\nexport default AddName\r\n\r\n  ","import React from 'react'; \r\n\r\nclass NamesList extends React.Component {\r\n\r\n  handleRemoveName = (e) => {\r\n    e.preventDefault()\r\n    var nameToRemove = e.target.name //'target' refers to the button in our case\r\n    return this.props.handleRemoveName(nameToRemove)\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n      \r\n      <ol>{this.props.names.map((name, index) => \r\n      <div key={index} className=\"individual-name-container\">\r\n        <li key={index}>{name}</li>  \r\n        <button name={name} onClick={this.handleRemoveName} className=\"remove-buttons\">x</button>\r\n      </div>\r\n       )}</ol>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default NamesList","import React from 'react';\nimport './App.css';\nimport AddName from './components/AddName';\nimport NamesList from './components/NamesList';\n\nclass App extends React.Component {\n  state = {\n    names: []\n  }\n\n  //add name to the list\n  handleAddName = (name) => {\n    name.length >= 1 ? this.setState({\n      names: [...this.state.names, name]\n    }) : alert('Please enter a name')\n    \n  }\n\n  handleRandomize = () => {\n    const array = this.state.names\n    //Durstenfeld shuffle algorithm to shuffle the array\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n    this.setState({\n      names: array\n    })\n  }\n\n  //remove a name from the list with an 'x' button next to the name\n  handleRemoveName = (name) => {\n    const array = [...this.state.names];\n    const index = array.indexOf(name)\n    if (index !== -1) { \n      array.splice(index, 1); \n      this.setState({\n        names: array\n      })\n    }\n\n  }\n\n  //clear all names\n  handdleDeleteAll = () => {\n    this.setState({\n      names: []\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <div id=\"wrapper\">\n        <h2>Name Shuffler</h2>\n        <NamesList names={this.state.names} handleRemoveName={this.handleRemoveName}/>\n        <AddName handleAddName={this.handleAddName}/>\n        <button onClick={this.handleRandomize} className=\"bottom-button\">Shuffle</button>\n        <button onClick={this.handdleDeleteAll} className=\"bottom-button\">Delete All</button>\n      </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}